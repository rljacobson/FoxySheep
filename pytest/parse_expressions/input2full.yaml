# This YAML file contains lots of data to
# check parsing from Mathematica InputForm
# to Mathematica to OutputForm


numberLiteral:

  -
    # One digit
    InputForm: 1
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '1')))"

  -
    # One More than one dgit
    InputForm: 12
    FullForm: 12
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '12')))"

  -
    # Decimal
    InputForm: 167.5
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '167.5')))"

  -
    # Base 8 representation
    InputForm: 15^^8
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseN>  '15' '^^8')))"

  -
    InputForm: 55*^2
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '55' (<numberLiteralExponent:NumberLiteralExponent>  '*^' '2'))))"

  # -
  #   InputForm: "10^^3.58.3"
  #   tree: "(expr (numberLiteral '55' '^^8.3')))"

  -
    # Machine-specific literal precision
    InputForm: 132`
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '132' (<numberLiteralPrecision:NumberLiteralPrecision>  '`'))))"

  -
    # Base 8 with Machine-specific literal precision
    InputForm: 167^^8``5
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseN>  '167' '^^8' (<numberLiteralPrecision:NumberLiteralPrecision>  '``' '5'))))"

##############

binOp:
    -
      InputForm: 1 ** 10
      tree: "(<prog:Prog>  (<expr:NonCommutativeMultiply>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '1')) '**' (<expr:Number>  (<numberLiteral:NumberBaseTen>  '10'))))"
      FullForm: "NonCommutativeMultiply[1,10]"

    -
      InputForm: 1 / 10 3
      tree: "(<prog:Prog>  (<expr:Times>  (<expr:Divide>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '1')) '/' (<expr:Number>  (<numberLiteral:NumberBaseTen>  '10'))) (<expr:Number>  (<numberLiteral:NumberBaseTen>  '3'))))"
      FullForm: "Times[Times[1,Power[10,-1]],3]"

span:
    -
      InputForm: "{a, b, c, d, e, f}[[2 ;; 4]]"
      tree: "(<prog:Prog>  (<expr:Accessor>  (<expr:List>  '{' (<expressionList:ExpressionListed>  (<expr:SymbolLiteral>  (<symbol:ContextName>  a)) ',' (<expr:SymbolLiteral>  (<symbol:ContextName>  b)) ',' (<expr:SymbolLiteral>  (<symbol:ContextName>  c)) ',' (<expr:SymbolLiteral>  (<symbol:ContextName>  d)) ',' (<expr:SymbolLiteral>  (<symbol:ContextName>  e)) ',' (<expr:SymbolLiteral>  (<symbol:ContextName>  f))) '}') (<accessExpression:AccessExpressionA>  '[' '[' (<expressionList:ExpressionListed>  (<expr:SpanA>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '2')) ';;' (<expr:Number>  (<numberLiteral:NumberBaseTen>  '4')))) ']' ']')))"
      FullForm: "Part[List[a,b,c,d,e,f],Span[2,4]]"
