# This YAML file contains lots of data to
# check parsing from Mathematica InputForm
# to Mathematica to Python


numberLiteral:

  -
    # One digit
    InputForm: 1
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '1')))"
    python: (1)

  -
    # One More than one dgit
    InputForm: 12
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '12')))"
    python: (12)

  -
    # Decimal
    InputForm: 167.5
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '167.5')))"
    python: Decimal(167.5)

  -
    # Base 8 representation
    InputForm: 15^^8
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseN>  '15' '^^8')))"
    python: int(15, 8)

  -
    # number x Base 10 exponent
    InputForm: 55*^2
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '55' (<numberLiteralExponent:NumberLiteralExponent>  '*^' '2'))))"
    python: (55 * 10 ** 2)

  # -
  #   InputForm: "10^^3.58.3"
  #   tree: "(expr (numberLiteral '55' '^^8.3')))"

  -
    # Machine-specific literal precision
    InputForm: 132`
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '132' (<numberLiteralPrecision:NumberLiteralPrecision>  '`'))))"
    python: (132)

  -
    # Base 8 with Machine-specific literal precision
    InputForm: 167^^8``5
    tree: "(<prog:Prog>  (<expr:Number>  (<numberLiteral:NumberBaseN>  '167' '^^8' (<numberLiteralPrecision:NumberLiteralPrecision>  '``' '5'))))"
    python: int(167, 8)

##############

binOp:
    -
      InputForm: 1 ** 10
      tree: "(<prog:Prog>  (<expr:NonCommutativeMultiply>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '1')) '**' (<expr:Number>  (<numberLiteral:NumberBaseTen>  '10'))))"
      python: "(1 * 10)"

    -
      InputForm: 1 / 10 3
      tree: "(<prog:Prog>  (<expr:Times>  (<expr:Divide>  (<expr:Number>  (<numberLiteral:NumberBaseTen>  '1')) '/' (<expr:Number>  (<numberLiteral:NumberBaseTen>  '10'))) (<expr:Number>  (<numberLiteral:NumberBaseTen>  '3'))))"
      python: "(1 / 10 * 3)"

UnaryOp:
    -
      InputForm: +(1)
      tree: "(<prog:Prog>  (<expr:UnaryPlusMinus>  '+' (<expr:Parentheses>  '(' (<expr:Number>  (<numberLiteral:NumberBaseTen>  '1')) ')')))"
      python: (+1)

Symbol:
    -
      InputForm: x
      tree: "(<prog:Prog>  (<expr:SymbolLiteral>  (<symbol:ContextName>  x)))"
      python: x

    -
      InputForm: x^2 + y^2
      tree: "(<prog:Prog>  (<expr:PlusOp>  (<expr:Power>  (<expr:SymbolLiteral>  (<symbol:ContextName>  x)) '^' (<expr:Number>  (<numberLiteral:NumberBaseTen>  '2'))) '+' (<expr:Power>  (<expr:SymbolLiteral>  (<symbol:ContextName>  y)) '^' (<expr:Number>  (<numberLiteral:NumberBaseTen>  '2')))))"
      python: (x ** 2 + y ** 2)
